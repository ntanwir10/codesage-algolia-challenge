version: "3.8"

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: codesage_postgres_prod
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    volumes:
      - postgres_data_prod:/var/lib/postgresql/data
    networks:
      - codesage_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  # CodeSage MCP Server (Production)
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile.prod
    container_name: codesage_mcp_server_prod
    ports:
      - "8001:8001"
    volumes:
      - backend_uploads_prod:/app/uploads
    env_file:
      - .env.prod
    environment:
      - DATABASE_URL=postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}
      - MCP_SERVER_HOST=0.0.0.0
      - MCP_SERVER_PORT=8001
      - ENVIRONMENT=production
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - codesage_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8001/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  # Nginx Reverse Proxy (Optional for production)
  nginx:
    image: nginx:alpine
    container_name: codesage_nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
    depends_on:
      - backend
    networks:
      - codesage_network
    restart: unless-stopped

volumes:
  postgres_data_prod:
  backend_uploads_prod:

networks:
  codesage_network:
    driver: bridge
